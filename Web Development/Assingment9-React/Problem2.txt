 Explain useState Hook & what can you achieve with it?
 The useState hook is a built-in hook in React that allows functional components to have their own internal state. It enables you to declare and manage state variables within a functional component without the need for a class component.

Here's an explanation of the useState hook and what you can achieve with it:

Syntax and Usage:

To use the useState hook, you import it from the react module: import React, { useState } from 'react';
Within your functional component, you call useState and pass in the initial state value. It returns an array with two elements: the current state value and a function to update the state.
You can destructure the returned array into separate variables for the state value and the state updater function.
The state updater function is used to modify the state value, and it automatically triggers a re-render of the component.
Updating State:

You can update the state value by invoking the state updater function returned by useState.
When you update the state using the updater function, React will re-render the component, and the updated state value will be reflected in the UI.
The state updater function can take either a new value or a function that receives the previous state value and returns the new state value. This is useful when the new state depends on the previous state.
Multiple State Variables:

You can use the useState hook multiple times within a single component to manage different state variables independently.
Each call to useState maintains its own state value and state updater function.
Function Component with State:

Before the introduction of hooks, functional components were stateless. With the useState hook, functional components can now have state and become more powerful.
You can use useState to handle simple or complex state needs within functional components, such as managing form inputs, toggling UI elements, or tracking user interactions.